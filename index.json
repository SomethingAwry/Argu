[{"uri":"https://fsprojects.github.io/Argu/reference/argu.html","title":"Argu","content":"ArguAttributes \nArgumentParserUtils \nCliPrefix \nAppSettingsConfigurationReader \nArguException \nArguParseException \nArgumentCaseInfo \nArgumentParser \nArgumentParser<'Template> \nArgumentType \nCliPosition \nConfigurationReader \nCustomAssignmentSeparator \nDictionaryConfigurationReader \nEnvironmentVariableConfigurationReader \nErrorCode \nExceptionExiter \nFunctionConfigurationReader \nIArgParserTemplate \nIArgumentParserVisitor<'R> \nIConfigurationReader \nIExiter \nNullConfigurationReader \nParseResults<'Template> \nParseSource \nProcessExiter"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes.html","title":"ArguAttributes","content":"ArguAttributes \n\n Argu Attribute declaration module\n \nArguAttributes.AltCommandLineAttribute \nAltCommandLineAttribute \nArguAttributes.AppSettingsSeparatorAttribute \nAppSettingsSeparatorAttribute \nArguAttributes.CliPositionAttribute \nCliPositionAttribute \nArguAttributes.CliPrefixAttribute \nCliPrefixAttribute \nArguAttributes.ColonAssignmentAttribute \nColonAssignmentAttribute \nArguAttributes.ColonAssignmentOrSpacedAttribute \nColonAssignmentOrSpacedAttribute \nArguAttributes.CustomAppSettingsAttribute \nCustomAppSettingsAttribute \nArguAttributes.CustomAssignmentAttribute \nCustomAssignmentAttribute \nArguAttributes.CustomAssignmentOrSpacedAttribute \nCustomAssignmentOrSpacedAttribute \nArguAttributes.CustomCommandLineAttribute \nCustomCommandLineAttribute \nArguAttributes.DisableHelpFlagsAttribute \nDisableHelpFlagsAttribute \nArguAttributes.EqualsAssignmentAttribute \nEqualsAssignmentAttribute \nArguAttributes.EqualsAssignmentOrSpacedAttribute \nEqualsAssignmentOrSpacedAttribute \nArguAttributes.ExactlyOnceAttribute \nExactlyOnceAttribute \nArguAttributes.FirstAttribute \nFirstAttribute \nArguAttributes.GatherAllSourcesAttribute \nGatherAllSourcesAttribute \nArguAttributes.GatherUnrecognizedAttribute \nGatherUnrecognizedAttribute \nArguAttributes.HelpDescriptionAttribute \nHelpDescriptionAttribute \nArguAttributes.HelpFlagsAttribute \nHelpFlagsAttribute \nArguAttributes.HiddenAttribute \nHiddenAttribute \nArguAttributes.InheritAttribute \nInheritAttribute \nArguAttributes.LastAttribute \nLastAttribute \nArguAttributes.MainCommandAttribute \nMainCommandAttribute \nArguAttributes.MandatoryAttribute \nMandatoryAttribute \nArguAttributes.NoAppSettingsAttribute \nNoAppSettingsAttribute \nArguAttributes.NoCommandLineAttribute \nNoCommandLineAttribute \nArguAttributes.ParseCSVAttribute \nParseCSVAttribute \nArguAttributes.PrintLabelsAttribute \nPrintLabelsAttribute \nArguAttributes.RequireSubcommandAttribute \nRequireSubcommandAttribute \nArguAttributes.RestAttribute \nRestAttribute \nArguAttributes.SubCommandAttribute \nSubCommandAttribute \nArguAttributes.UniqueAttribute \nUniqueAttribute"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-altcommandlineattribute.html","title":"AltCommandLineAttribute","content":"AltCommandLineAttribute \n\n Declares a set of secondary CLI identifiers for the current parameter.\n Does not replace the default identifier which is either auto-generated\n or specified by the CustomCommandLine attribute.\n \nAltCommandLineAttribute.( .ctor ) \n( .ctor ) \nAltCommandLineAttribute.Names \nNames"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-altcommandlineattribute.html#( .ctor )","title":"AltCommandLineAttribute.( .ctor )","content":"AltCommandLineAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-altcommandlineattribute.html#Names","title":"AltCommandLineAttribute.Names","content":"AltCommandLineAttribute.Names \nNames \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-appsettingsseparatorattribute.html","title":"AppSettingsSeparatorAttribute","content":"AppSettingsSeparatorAttribute \n\n Specify a custom value separator in AppSettings parsing parameters.\n Used in CSV or list-based parameter parsing.\n \nAppSettingsSeparatorAttribute.( .ctor ) \n( .ctor ) \nAppSettingsSeparatorAttribute.( .ctor ) \n( .ctor ) \nAppSettingsSeparatorAttribute.SplitOptions \nSplitOptions \nAppSettingsSeparatorAttribute.Separators \nSeparators"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-appsettingsseparatorattribute.html#( .ctor )","title":"AppSettingsSeparatorAttribute.( .ctor )","content":"AppSettingsSeparatorAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-appsettingsseparatorattribute.html#( .ctor )","title":"AppSettingsSeparatorAttribute.( .ctor )","content":"AppSettingsSeparatorAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-appsettingsseparatorattribute.html#SplitOptions","title":"AppSettingsSeparatorAttribute.SplitOptions","content":"AppSettingsSeparatorAttribute.SplitOptions \nSplitOptions \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-appsettingsseparatorattribute.html#Separators","title":"AppSettingsSeparatorAttribute.Separators","content":"AppSettingsSeparatorAttribute.Separators \nSeparators \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-clipositionattribute.html","title":"CliPositionAttribute","content":"CliPositionAttribute \n\n Declares that argument should be placed at specific position.\n \nCliPositionAttribute.( .ctor ) \n( .ctor ) \nCliPositionAttribute.Position \nPosition"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-clipositionattribute.html#( .ctor )","title":"CliPositionAttribute.( .ctor )","content":"CliPositionAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-clipositionattribute.html#Position","title":"CliPositionAttribute.Position","content":"CliPositionAttribute.Position \nPosition \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-cliprefixattribute.html","title":"CliPrefixAttribute","content":"CliPrefixAttribute \n\n Specifies a custom prefix for auto-generated CLI names.\n This defaults to double dash ('--').\n \nCliPrefixAttribute.( .ctor ) \n( .ctor ) \nCliPrefixAttribute.Prefix \nPrefix"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-cliprefixattribute.html#( .ctor )","title":"CliPrefixAttribute.( .ctor )","content":"CliPrefixAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-cliprefixattribute.html#Prefix","title":"CliPrefixAttribute.Prefix","content":"CliPrefixAttribute.Prefix \nPrefix \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-colonassignmentattribute.html","title":"ColonAssignmentAttribute","content":"ColonAssignmentAttribute \n\n Use '--param:arg' or '--param key:value' assignment syntax in CLI.\n Requires that the argument should have parameters of arity 1 or 2 only.\n \nColonAssignmentAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-colonassignmentattribute.html#( .ctor )","title":"ColonAssignmentAttribute.( .ctor )","content":"ColonAssignmentAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-colonassignmentorspacedattribute.html","title":"ColonAssignmentOrSpacedAttribute","content":"ColonAssignmentOrSpacedAttribute \n\n Use '--param:arg' assignment syntax in CLI.\n Parameters can also be assigned using space as separator e.g. '--param arg'\n Requires that the argument should have parameters of arity 1 only.\n \nColonAssignmentOrSpacedAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-colonassignmentorspacedattribute.html#( .ctor )","title":"ColonAssignmentOrSpacedAttribute.( .ctor )","content":"ColonAssignmentOrSpacedAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customappsettingsattribute.html","title":"CustomAppSettingsAttribute","content":"CustomAppSettingsAttribute \n\n Declares a custom key identifier for the current parameter in AppSettings parsing.\n Replaces the auto-generated identifier name.\n \nCustomAppSettingsAttribute.( .ctor ) \n( .ctor ) \nCustomAppSettingsAttribute.Name \nName"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customappsettingsattribute.html#( .ctor )","title":"CustomAppSettingsAttribute.( .ctor )","content":"CustomAppSettingsAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customappsettingsattribute.html#Name","title":"CustomAppSettingsAttribute.Name","content":"CustomAppSettingsAttribute.Name \nName \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customassignmentattribute.html","title":"CustomAssignmentAttribute","content":"CustomAssignmentAttribute \n\n Use a custom separator for parameter assignment.\n e.g. '--param<separator>arg' or '--param key<separator>value'.\n Requires that the argument should have parameters of arity 1 or 2 only.\n Can be used to specify any assignment separator.\n \nCustomAssignmentAttribute.( .ctor ) \n( .ctor ) \nCustomAssignmentAttribute.Separator \nSeparator"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customassignmentattribute.html#( .ctor )","title":"CustomAssignmentAttribute.( .ctor )","content":"CustomAssignmentAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customassignmentattribute.html#Separator","title":"CustomAssignmentAttribute.Separator","content":"CustomAssignmentAttribute.Separator \nSeparator \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customassignmentorspacedattribute.html","title":"CustomAssignmentOrSpacedAttribute","content":"CustomAssignmentOrSpacedAttribute \n\n Use a custom separator for parameter assignment.\n e.g. '--param<separator>arg'\n Parameters can also be assigned using space as separator e.g. '--param arg'\n Requires that the argument should have parameters of arity 1 only.\n Can be used to specify any assignment separator.\n \nCustomAssignmentOrSpacedAttribute.( .ctor ) \n( .ctor ) \nCustomAssignmentOrSpacedAttribute.Separator \nSeparator"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customassignmentorspacedattribute.html#( .ctor )","title":"CustomAssignmentOrSpacedAttribute.( .ctor )","content":"CustomAssignmentOrSpacedAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customassignmentorspacedattribute.html#Separator","title":"CustomAssignmentOrSpacedAttribute.Separator","content":"CustomAssignmentOrSpacedAttribute.Separator \nSeparator \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customcommandlineattribute.html","title":"CustomCommandLineAttribute","content":"CustomCommandLineAttribute \n\n Declares a custom default CLI identifier for the current parameter.\n Replaces the auto-generated identifier name.\n \nCustomCommandLineAttribute.( .ctor ) \n( .ctor ) \nCustomCommandLineAttribute.Name \nName \nCustomCommandLineAttribute.AltNames \nAltNames"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customcommandlineattribute.html#( .ctor )","title":"CustomCommandLineAttribute.( .ctor )","content":"CustomCommandLineAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customcommandlineattribute.html#Name","title":"CustomCommandLineAttribute.Name","content":"CustomCommandLineAttribute.Name \nName \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-customcommandlineattribute.html#AltNames","title":"CustomCommandLineAttribute.AltNames","content":"CustomCommandLineAttribute.AltNames \nAltNames \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-disablehelpflagsattribute.html","title":"DisableHelpFlagsAttribute","content":"DisableHelpFlagsAttribute \n\n Specifies that Help/Usage switches should be disabled for the CLI.\n \nDisableHelpFlagsAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-disablehelpflagsattribute.html#( .ctor )","title":"DisableHelpFlagsAttribute.( .ctor )","content":"DisableHelpFlagsAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-equalsassignmentattribute.html","title":"EqualsAssignmentAttribute","content":"EqualsAssignmentAttribute \n\n Use '--param=arg' or '--param key=value' assignment syntax in CLI.\n Requires that the argument should have parameters of arity 1 or 2 only.\n \nEqualsAssignmentAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-equalsassignmentattribute.html#( .ctor )","title":"EqualsAssignmentAttribute.( .ctor )","content":"EqualsAssignmentAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-equalsassignmentorspacedattribute.html","title":"EqualsAssignmentOrSpacedAttribute","content":"EqualsAssignmentOrSpacedAttribute \n\n Use '--param=arg' assignment syntax in CLI.\n Parameters can also be assigned using space as separator e.g. '--param arg'\n Requires that the argument should have parameters of arity 1 only.\n \nEqualsAssignmentOrSpacedAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-equalsassignmentorspacedattribute.html#( .ctor )","title":"EqualsAssignmentOrSpacedAttribute.( .ctor )","content":"EqualsAssignmentOrSpacedAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-exactlyonceattribute.html","title":"ExactlyOnceAttribute","content":"ExactlyOnceAttribute \n\n Demands that the argument should be specified exactly once; a parse exception is raised otherwise.\n Equivalent to attaching both the Mandatory and Unique attribute on the parameter.\n \nExactlyOnceAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-exactlyonceattribute.html#( .ctor )","title":"ExactlyOnceAttribute.( .ctor )","content":"ExactlyOnceAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-firstattribute.html","title":"FirstAttribute","content":"FirstAttribute \n\n Declares that argument can only be placed at the beginning of the CLI syntax.\n A parse exception will be raised if that is not the case.\n \nFirstAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-firstattribute.html#( .ctor )","title":"FirstAttribute.( .ctor )","content":"FirstAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-gatherallsourcesattribute.html","title":"GatherAllSourcesAttribute","content":"GatherAllSourcesAttribute \n\n Requires that CLI parameters should not override AppSettings parameters.\n Will return parsed results from both AppSettings and CLI.\n \nGatherAllSourcesAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-gatherallsourcesattribute.html#( .ctor )","title":"GatherAllSourcesAttribute.( .ctor )","content":"GatherAllSourcesAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-gatherunrecognizedattribute.html","title":"GatherUnrecognizedAttribute","content":"GatherUnrecognizedAttribute \n\n Denotes that the given argument should accummulate any unrecognized arguments it encounters.\n Must contain a single field of type string\n \nGatherUnrecognizedAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-gatherunrecognizedattribute.html#( .ctor )","title":"GatherUnrecognizedAttribute.( .ctor )","content":"GatherUnrecognizedAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-helpdescriptionattribute.html","title":"HelpDescriptionAttribute","content":"HelpDescriptionAttribute \n\n Specifies a custom description text for the Help/Usage switches in the usage string.\n \nHelpDescriptionAttribute.( .ctor ) \n( .ctor ) \nHelpDescriptionAttribute.Description \nDescription"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-helpdescriptionattribute.html#( .ctor )","title":"HelpDescriptionAttribute.( .ctor )","content":"HelpDescriptionAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-helpdescriptionattribute.html#Description","title":"HelpDescriptionAttribute.Description","content":"HelpDescriptionAttribute.Description \nDescription \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-helpflagsattribute.html","title":"HelpFlagsAttribute","content":"HelpFlagsAttribute \n\n Specifies a custom set of Help/Usage switches for the CLI.\n \nHelpFlagsAttribute.( .ctor ) \n( .ctor ) \nHelpFlagsAttribute.Names \nNames"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-helpflagsattribute.html#( .ctor )","title":"HelpFlagsAttribute.( .ctor )","content":"HelpFlagsAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-helpflagsattribute.html#Names","title":"HelpFlagsAttribute.Names","content":"HelpFlagsAttribute.Names \nNames \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-hiddenattribute.html","title":"HiddenAttribute","content":"HiddenAttribute \n\n Hides argument from command line argument usage string.\n \nHiddenAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-hiddenattribute.html#( .ctor )","title":"HiddenAttribute.( .ctor )","content":"HiddenAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-inheritattribute.html","title":"InheritAttribute","content":"InheritAttribute \n\n Denotes that the given argument should be inherited in the scope of any subcommands.\n \nInheritAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-inheritattribute.html#( .ctor )","title":"InheritAttribute.( .ctor )","content":"InheritAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-lastattribute.html","title":"LastAttribute","content":"LastAttribute \n\n Declares that argument can only be placed at the end of the CLI syntax.\n A parse exception will be raised if that is not the case.\n \nLastAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-lastattribute.html#( .ctor )","title":"LastAttribute.( .ctor )","content":"LastAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-maincommandattribute.html","title":"MainCommandAttribute","content":"MainCommandAttribute \n\n Declares that argument is the main command of the CLI syntax.\n Arguments are specified without requiring a switch.\n \nMainCommandAttribute.( .ctor ) \n( .ctor ) \nMainCommandAttribute.( .ctor ) \n( .ctor ) \nMainCommandAttribute.ArgumentName \nArgumentName"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-maincommandattribute.html#( .ctor )","title":"MainCommandAttribute.( .ctor )","content":"MainCommandAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-maincommandattribute.html#( .ctor )","title":"MainCommandAttribute.( .ctor )","content":"MainCommandAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-maincommandattribute.html#ArgumentName","title":"MainCommandAttribute.ArgumentName","content":"MainCommandAttribute.ArgumentName \nArgumentName \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-mandatoryattribute.html","title":"MandatoryAttribute","content":"MandatoryAttribute \n\n Demands at least one parsed result for this argument; a parse exception is raised otherwise.\n \nMandatoryAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-mandatoryattribute.html#( .ctor )","title":"MandatoryAttribute.( .ctor )","content":"MandatoryAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-noappsettingsattribute.html","title":"NoAppSettingsAttribute","content":"NoAppSettingsAttribute \n\n Disable AppSettings parsing for this branch. Use for CLI parsing only.\n \nNoAppSettingsAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-noappsettingsattribute.html#( .ctor )","title":"NoAppSettingsAttribute.( .ctor )","content":"NoAppSettingsAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-nocommandlineattribute.html","title":"NoCommandLineAttribute","content":"NoCommandLineAttribute \n\n Disable CLI parsing for this argument. Use for AppSettings parsing only.\n \nNoCommandLineAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-nocommandlineattribute.html#( .ctor )","title":"NoCommandLineAttribute.( .ctor )","content":"NoCommandLineAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-parsecsvattribute.html","title":"ParseCSVAttribute","content":"ParseCSVAttribute \n\n Parse multiple parameters in AppSettings as comma separated values. OBSOLETE\n \nParseCSVAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-parsecsvattribute.html#( .ctor )","title":"ParseCSVAttribute.( .ctor )","content":"ParseCSVAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-printlabelsattribute.html","title":"PrintLabelsAttribute","content":"PrintLabelsAttribute \n\n Print F# 3.1 field labels in usage string. OBSOLETE\n \nPrintLabelsAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-printlabelsattribute.html#( .ctor )","title":"PrintLabelsAttribute.( .ctor )","content":"PrintLabelsAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-requiresubcommandattribute.html","title":"RequireSubcommandAttribute","content":"RequireSubcommandAttribute \n\n Demands that at least one subcommand is specified in the CLI; a parse exception is raised otherwise.\n \nRequireSubcommandAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-requiresubcommandattribute.html#( .ctor )","title":"RequireSubcommandAttribute.( .ctor )","content":"RequireSubcommandAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-restattribute.html","title":"RestAttribute","content":"RestAttribute \n\n Consume all remaining CLI tokens using this parameter wherever it might occur. OBSOLETE\n \nRestAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-restattribute.html#( .ctor )","title":"RestAttribute.( .ctor )","content":"RestAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-subcommandattribute.html","title":"SubCommandAttribute","content":"SubCommandAttribute \n\n Declares that argument is a subcommand.\n A parse exception will be raised if the argument has parameters\n and their type is not ParseResults<_>.\n Implicit if the argument does have a parameter of type ParseResults<_>.\n \nSubCommandAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-subcommandattribute.html#( .ctor )","title":"SubCommandAttribute.( .ctor )","content":"SubCommandAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-uniqueattribute.html","title":"UniqueAttribute","content":"UniqueAttribute \n\n Demands that the argument should be specified at most once; a parse exception is raised otherwise.\n \nUniqueAttribute.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguattributes-uniqueattribute.html#( .ctor )","title":"UniqueAttribute.( .ctor )","content":"UniqueAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparserutils.html","title":"ArgumentParserUtils","content":"ArgumentParserUtils \n \nArgumentParserUtils.toParseResults \ntoParseResults \nArgumentParserUtils.tagOf \ntagOf \nArgumentParserUtils.Parser \nParser \nArgumentParserUtils.Parser \nParser"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparserutils.html#toParseResults","title":"ArgumentParserUtils.toParseResults","content":"ArgumentParserUtils.toParseResults \ntoParseResults \n\n converts a sequence of inputs to a ParseResults instance\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparserutils.html#tagOf","title":"ArgumentParserUtils.tagOf","content":"ArgumentParserUtils.tagOf \ntagOf \n\n gets the F# union tag representation of given argument instance\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparserutils.html#Parser","title":"ArgumentParserUtils.Parser","content":"ArgumentParserUtils.Parser \nParser \n\n Gets the parser instance corresponding to the parse result\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparserutils.html#Parser","title":"ArgumentParserUtils.Parser","content":"ArgumentParserUtils.Parser \nParser \n\n Gets the parser instance corresponding to the parse result\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliprefix.html","title":"CliPrefix","content":"CliPrefix \n\n Predefined CLI prefixes to be added\n \nCliPrefix.None \nNone \nCliPrefix.Dash \nDash \nCliPrefix.DoubleDash \nDoubleDash"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliprefix.html#None","title":"CliPrefix.None","content":"CliPrefix.None \nNone \n\n No Cli Prefix\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliprefix.html#Dash","title":"CliPrefix.Dash","content":"CliPrefix.Dash \nDash \n\n Single Dash prefix '-'\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliprefix.html#DoubleDash","title":"CliPrefix.DoubleDash","content":"CliPrefix.DoubleDash \nDoubleDash \n\n Double Dash prefix '--'\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-appsettingsconfigurationreader.html","title":"AppSettingsConfigurationReader","content":"AppSettingsConfigurationReader \n\n AppSettings XML configuration reader\n \nAppSettingsConfigurationReader.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-appsettingsconfigurationreader.html#( .ctor )","title":"AppSettingsConfigurationReader.( .ctor )","content":"AppSettingsConfigurationReader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguexception.html","title":"ArguException","content":"ArguException \n\n Exception raised by Argu\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguparseexception.html","title":"ArguParseException","content":"ArguParseException \n\n Parse exception raised by Argu\n \nArguParseException.ErrorCode \nErrorCode"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-arguparseexception.html#ErrorCode","title":"ArguParseException.ErrorCode","content":"ArguParseException.ErrorCode \nErrorCode \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html","title":"ArgumentCaseInfo","content":"ArgumentCaseInfo \n\n Union argument metadata\n \nArgumentCaseInfo.Name \nName \nArgumentCaseInfo.UnionCaseInfo \nUnionCaseInfo \nArgumentCaseInfo.ArgumentType \nArgumentType \nArgumentCaseInfo.CommandLineNames \nCommandLineNames \nArgumentCaseInfo.AppSettingsName \nAppSettingsName \nArgumentCaseInfo.Description \nDescription \nArgumentCaseInfo.AppSettingsSeparators \nAppSettingsSeparators \nArgumentCaseInfo.AppSettingsSplitOptions \nAppSettingsSplitOptions \nArgumentCaseInfo.CliPosition \nCliPosition \nArgumentCaseInfo.IsMainCommand \nIsMainCommand \nArgumentCaseInfo.IsRest \nIsRest \nArgumentCaseInfo.CustomAssignmentSeparator \nCustomAssignmentSeparator \nArgumentCaseInfo.AppSettingsCSV \nAppSettingsCSV \nArgumentCaseInfo.IsMandatory \nIsMandatory \nArgumentCaseInfo.IsUnique \nIsUnique \nArgumentCaseInfo.IsHidden \nIsHidden \nArgumentCaseInfo.IsGatherUnrecognized \nIsGatherUnrecognized \nArgumentCaseInfo.GatherAllSources \nGatherAllSources"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#Name","title":"ArgumentCaseInfo.Name","content":"ArgumentCaseInfo.Name \nName \n\n Human readable name identifier\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#UnionCaseInfo","title":"ArgumentCaseInfo.UnionCaseInfo","content":"ArgumentCaseInfo.UnionCaseInfo \nUnionCaseInfo \n\n Union case reflection identifier\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#ArgumentType","title":"ArgumentCaseInfo.ArgumentType","content":"ArgumentCaseInfo.ArgumentType \nArgumentType \n\n Type of argument parser\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#CommandLineNames","title":"ArgumentCaseInfo.CommandLineNames","content":"ArgumentCaseInfo.CommandLineNames \nCommandLineNames \n\n head element denotes primary command line arg\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#AppSettingsName","title":"ArgumentCaseInfo.AppSettingsName","content":"ArgumentCaseInfo.AppSettingsName \nAppSettingsName \n\n name used in AppSettings\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#Description","title":"ArgumentCaseInfo.Description","content":"ArgumentCaseInfo.Description \nDescription \n\n Description of the parameter\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#AppSettingsSeparators","title":"ArgumentCaseInfo.AppSettingsSeparators","content":"ArgumentCaseInfo.AppSettingsSeparators \nAppSettingsSeparators \n\n AppSettings parameter separator\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#AppSettingsSplitOptions","title":"ArgumentCaseInfo.AppSettingsSplitOptions","content":"ArgumentCaseInfo.AppSettingsSplitOptions \nAppSettingsSplitOptions \n\n AppSettings parameter split options\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#CliPosition","title":"ArgumentCaseInfo.CliPosition","content":"ArgumentCaseInfo.CliPosition \nCliPosition \n\n Mandated Cli position for the argument\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#IsMainCommand","title":"ArgumentCaseInfo.IsMainCommand","content":"ArgumentCaseInfo.IsMainCommand \nIsMainCommand \n\n Specifies that this argument is the main CLI command\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#IsRest","title":"ArgumentCaseInfo.IsRest","content":"ArgumentCaseInfo.IsRest \nIsRest \n\n If specified, should consume remaining tokens from the CLI\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#CustomAssignmentSeparator","title":"ArgumentCaseInfo.CustomAssignmentSeparator","content":"ArgumentCaseInfo.CustomAssignmentSeparator \nCustomAssignmentSeparator \n\n Separator token used for EqualsAssignment syntax; e.g. '=' forces '--param=arg' syntax\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#AppSettingsCSV","title":"ArgumentCaseInfo.AppSettingsCSV","content":"ArgumentCaseInfo.AppSettingsCSV \nAppSettingsCSV \n\n If specified, multiple parameters can be added in AppSettings in CSV form.\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#IsMandatory","title":"ArgumentCaseInfo.IsMandatory","content":"ArgumentCaseInfo.IsMandatory \nIsMandatory \n\n Fails if no argument of this type is specified\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#IsUnique","title":"ArgumentCaseInfo.IsUnique","content":"ArgumentCaseInfo.IsUnique \nIsUnique \n\n Specifies that argument should be specified at most once in CLI\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#IsHidden","title":"ArgumentCaseInfo.IsHidden","content":"ArgumentCaseInfo.IsHidden \nIsHidden \n\n Hide from Usage\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#IsGatherUnrecognized","title":"ArgumentCaseInfo.IsGatherUnrecognized","content":"ArgumentCaseInfo.IsGatherUnrecognized \nIsGatherUnrecognized \n\n Declares that the parameter should gather any unrecognized CLI params\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentcaseinfo.html#GatherAllSources","title":"ArgumentCaseInfo.GatherAllSources","content":"ArgumentCaseInfo.GatherAllSources \nGatherAllSources \n\n Combine AppSettings with CLI inputs\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html","title":"ArgumentParser","content":"ArgumentParser \n\n The Argu type generates an argument parser given a type argument\n that is an F# discriminated union. It can then be used to parse command line arguments\n or XML configuration.\n \nArgumentParser.Accept \nAccept \nArgumentParser.GetArgumentCases \nGetArgumentCases \nArgumentParser.GetSubCommandParsers \nGetSubCommandParsers \nArgumentParser.PrintCommandLineSyntax \nPrintCommandLineSyntax \nArgumentParser.PrintUsage \nPrintUsage \nArgumentParser.ParentInfo \nParentInfo \nArgumentParser.IsSubCommandParser \nIsSubCommandParser \nArgumentParser.HelpTextMessage \nHelpTextMessage \nArgumentParser.HelpFlags \nHelpFlags \nArgumentParser.HelpDescription \nHelpDescription \nArgumentParser.ErrorHandler \nErrorHandler \nArgumentParser.Create \nCreate"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#Accept","title":"ArgumentParser.Accept","content":"ArgumentParser.Accept \nAccept \n\n     Enables access to the typed API of an ArgumentParser\n     when template type is unknown.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#GetArgumentCases","title":"ArgumentParser.GetArgumentCases","content":"ArgumentParser.GetArgumentCases \nGetArgumentCases \n\n Gets metadata for all union cases used by parser\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#GetSubCommandParsers","title":"ArgumentParser.GetSubCommandParsers","content":"ArgumentParser.GetSubCommandParsers \nGetSubCommandParsers \n\n Gets all subcommand parsers for given parser\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#PrintCommandLineSyntax","title":"ArgumentParser.PrintCommandLineSyntax","content":"ArgumentParser.PrintCommandLineSyntax \nPrintCommandLineSyntax \n\n     Prints command line syntax. Useful for generating documentation.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#PrintUsage","title":"ArgumentParser.PrintUsage","content":"ArgumentParser.PrintUsage \nPrintUsage \nFormats a usage string for the argument parser."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#ParentInfo","title":"ArgumentParser.ParentInfo","content":"ArgumentParser.ParentInfo \nParentInfo \n\n If subcommand parser, gets parent argument metadata\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#IsSubCommandParser","title":"ArgumentParser.IsSubCommandParser","content":"ArgumentParser.IsSubCommandParser \nIsSubCommandParser \n\n Returns true if parser corresponds to a subcommand\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#HelpTextMessage","title":"ArgumentParser.HelpTextMessage","content":"ArgumentParser.HelpTextMessage \nHelpTextMessage \n\n Gets the message that will be displayed at the top of the help text\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#HelpFlags","title":"ArgumentParser.HelpFlags","content":"ArgumentParser.HelpFlags \nHelpFlags \n\n Gets the help flags specified for the CLI parser\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#HelpDescription","title":"ArgumentParser.HelpDescription","content":"ArgumentParser.HelpDescription \nHelpDescription \n\n Gets the help description specified for the CLI parser\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#ErrorHandler","title":"ArgumentParser.ErrorHandler","content":"ArgumentParser.ErrorHandler \nErrorHandler \n\n Gets the default error handler used by the instance\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser.html#Create","title":"ArgumentParser.Create","content":"ArgumentParser.Create \nCreate \n\n     Create a new argument parsing scheme using given 'Template type\n     which must be an F# Discriminated Union.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html","title":"ArgumentParser<'Template>","content":"ArgumentParser<'Template> \n\n The Argu type generates an argument parser given a type argument\n that is an F# discriminated union. It can then be used to parse command line arguments\n or XML configuration.\n \nArgumentParser<'Template>.( .ctor ) \n( .ctor ) \nArgumentParser<'Template>.GetArgumentCaseInfo \nGetArgumentCaseInfo \nArgumentParser<'Template>.GetArgumentCaseInfo \nGetArgumentCaseInfo \nArgumentParser<'Template>.GetSubCommandParser \nGetSubCommandParser \nArgumentParser<'Template>.GetTag \nGetTag \nArgumentParser<'Template>.Parse \nParse \nArgumentParser<'Template>.ParseCommandLine \nParseCommandLine \nArgumentParser<'Template>.ParseConfiguration \nParseConfiguration \nArgumentParser<'Template>.PrintAppSettingsArguments \nPrintAppSettingsArguments \nArgumentParser<'Template>.PrintCommandLineArguments \nPrintCommandLineArguments \nArgumentParser<'Template>.PrintCommandLineArgumentsFlat \nPrintCommandLineArgumentsFlat \nArgumentParser<'Template>.ToParseResults \nToParseResults \nArgumentParser<'Template>.CheckStructure \nCheckStructure"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#( .ctor )","title":"ArgumentParser<'Template>.( .ctor )","content":"ArgumentParser<'Template>.( .ctor ) \n( .ctor ) \n\n     Creates a new parser instance based on supplied F# union template.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#GetArgumentCaseInfo","title":"ArgumentParser<'Template>.GetArgumentCaseInfo","content":"ArgumentParser<'Template>.GetArgumentCaseInfo \nGetArgumentCaseInfo \n\n     Gets argument metadata for given union case constructor\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#GetArgumentCaseInfo","title":"ArgumentParser<'Template>.GetArgumentCaseInfo","content":"ArgumentParser<'Template>.GetArgumentCaseInfo \nGetArgumentCaseInfo \n\n     Gets argument metadata for given argument instance.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#GetSubCommandParser","title":"ArgumentParser<'Template>.GetSubCommandParser","content":"ArgumentParser<'Template>.GetSubCommandParser \nGetSubCommandParser \n\n     Gets a subparser associated with specific subcommand instance\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#GetTag","title":"ArgumentParser<'Template>.GetTag","content":"ArgumentParser<'Template>.GetTag \nGetTag \n\n     Gets the F# union tag representation for given argument\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#Parse","title":"ArgumentParser<'Template>.Parse","content":"ArgumentParser<'Template>.Parse \nParse \nParse both command line args and supplied configuration reader.\n          Results are merged with command line args overriding configuration parameters."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#ParseCommandLine","title":"ArgumentParser<'Template>.ParseCommandLine","content":"ArgumentParser<'Template>.ParseCommandLine \nParseCommandLine \nParse command line arguments only."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#ParseConfiguration","title":"ArgumentParser<'Template>.ParseConfiguration","content":"ArgumentParser<'Template>.ParseConfiguration \nParseConfiguration \nParse arguments using specified configuration reader only. This defaults to the AppSettings configuration of the current process."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#PrintAppSettingsArguments","title":"ArgumentParser<'Template>.PrintAppSettingsArguments","content":"ArgumentParser<'Template>.PrintAppSettingsArguments \nPrintAppSettingsArguments \nPrints parameters in App.Config format."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#PrintCommandLineArguments","title":"ArgumentParser<'Template>.PrintCommandLineArguments","content":"ArgumentParser<'Template>.PrintCommandLineArguments \nPrintCommandLineArguments \nPrints parameters in command line format. Useful for argument string generation."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#PrintCommandLineArgumentsFlat","title":"ArgumentParser<'Template>.PrintCommandLineArgumentsFlat","content":"ArgumentParser<'Template>.PrintCommandLineArgumentsFlat \nPrintCommandLineArgumentsFlat \nPrints parameters in command line format. Useful for argument string generation."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#ToParseResults","title":"ArgumentParser<'Template>.ToParseResults","content":"ArgumentParser<'Template>.ToParseResults \nToParseResults \n\n     Converts a sequence of template argument inputs into a ParseResults instance\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumentparser-1.html#CheckStructure","title":"ArgumentParser<'Template>.CheckStructure","content":"ArgumentParser<'Template>.CheckStructure \nCheckStructure \nForce a check of the discriminated union structure."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumenttype.html","title":"ArgumentType","content":"ArgumentType \n\n Argument parameter type identifier\n \nArgumentType.Primitive \nPrimitive \nArgumentType.Optional \nOptional \nArgumentType.List \nList \nArgumentType.SubCommand \nSubCommand"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumenttype.html#Primitive","title":"ArgumentType.Primitive","content":"ArgumentType.Primitive \nPrimitive \n\n Argument specifies primitive parameters like strings or integers\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumenttype.html#Optional","title":"ArgumentType.Optional","content":"ArgumentType.Optional \nOptional \n\n Argument specifies an optional parameter which is primitive\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumenttype.html#List","title":"ArgumentType.List","content":"ArgumentType.List \nList \n\n Argument specifies a list of parameters of specific primitive type\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-argumenttype.html#SubCommand","title":"ArgumentType.SubCommand","content":"ArgumentType.SubCommand \nSubCommand \n\n Argument specifies a subcommand\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliposition.html","title":"CliPosition","content":"CliPosition \n\n Cli Position required to place argument\n \nCliPosition.First \nFirst \nCliPosition.Unspecified \nUnspecified \nCliPosition.Last \nLast"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliposition.html#First","title":"CliPosition.First","content":"CliPosition.First \nFirst \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliposition.html#Unspecified","title":"CliPosition.Unspecified","content":"CliPosition.Unspecified \nUnspecified \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-cliposition.html#Last","title":"CliPosition.Last","content":"CliPosition.Last \nLast \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html","title":"ConfigurationReader","content":"ConfigurationReader \n\n Configuration reader implementations\n \nConfigurationReader.FromAppSettings \nFromAppSettings \nConfigurationReader.FromAppSettings \nFromAppSettings \nConfigurationReader.FromAppSettingsFile \nFromAppSettingsFile \nConfigurationReader.FromDictionary \nFromDictionary \nConfigurationReader.FromEnvironmentVariables \nFromEnvironmentVariables \nConfigurationReader.FromFunction \nFromFunction \nConfigurationReader.NullReader \nNullReader"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#FromAppSettings","title":"ConfigurationReader.FromAppSettings","content":"ConfigurationReader.FromAppSettings \nFromAppSettings \n\n Create a configuration reader instance using the location of an assembly file\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#FromAppSettings","title":"ConfigurationReader.FromAppSettings","content":"ConfigurationReader.FromAppSettings \nFromAppSettings \n\n Create a configuration reader instance using the application's resident AppSettings configuration\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#FromAppSettingsFile","title":"ConfigurationReader.FromAppSettingsFile","content":"ConfigurationReader.FromAppSettingsFile \nFromAppSettingsFile \n\n Create a configuration reader instance using a local xml App.Config file\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#FromDictionary","title":"ConfigurationReader.FromDictionary","content":"ConfigurationReader.FromDictionary \nFromDictionary \n\n Create a configuration reader instance using an IDictionary instance\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#FromEnvironmentVariables","title":"ConfigurationReader.FromEnvironmentVariables","content":"ConfigurationReader.FromEnvironmentVariables \nFromEnvironmentVariables \n\n Create a configuration reader instance using environment variables\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#FromFunction","title":"ConfigurationReader.FromFunction","content":"ConfigurationReader.FromFunction \nFromFunction \n\n Create a configuration reader instance using an F# function\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-configurationreader.html#NullReader","title":"ConfigurationReader.NullReader","content":"ConfigurationReader.NullReader \nNullReader \n\n Create a configuration reader that always returns null\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-customassignmentseparator.html","title":"CustomAssignmentSeparator","content":"CustomAssignmentSeparator \n\n Describes the permitted separators between arguments and their values\n \nCustomAssignmentSeparator.Separator \nSeparator \nCustomAssignmentSeparator.TolerateSpacedArguments \nTolerateSpacedArguments"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-customassignmentseparator.html#Separator","title":"CustomAssignmentSeparator.Separator","content":"CustomAssignmentSeparator.Separator \nSeparator \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-customassignmentseparator.html#TolerateSpacedArguments","title":"CustomAssignmentSeparator.TolerateSpacedArguments","content":"CustomAssignmentSeparator.TolerateSpacedArguments \nTolerateSpacedArguments \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-dictionaryconfigurationreader.html","title":"DictionaryConfigurationReader","content":"DictionaryConfigurationReader \n\n Configuration reader dictionary proxy\n \nDictionaryConfigurationReader.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-dictionaryconfigurationreader.html#( .ctor )","title":"DictionaryConfigurationReader.( .ctor )","content":"DictionaryConfigurationReader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-environmentvariableconfigurationreader.html","title":"EnvironmentVariableConfigurationReader","content":"EnvironmentVariableConfigurationReader \n\n Environment variable-based configuration reader\n \nEnvironmentVariableConfigurationReader.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-environmentvariableconfigurationreader.html#( .ctor )","title":"EnvironmentVariableConfigurationReader.( .ctor )","content":"EnvironmentVariableConfigurationReader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-errorcode.html","title":"ErrorCode","content":"ErrorCode \n\n Error codes reported by Argu\n \nErrorCode.HelpText \nHelpText \nErrorCode.AppSettings \nAppSettings \nErrorCode.CommandLine \nCommandLine \nErrorCode.PostProcess \nPostProcess"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-errorcode.html#HelpText","title":"ErrorCode.HelpText","content":"ErrorCode.HelpText \nHelpText \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-errorcode.html#AppSettings","title":"ErrorCode.AppSettings","content":"ErrorCode.AppSettings \nAppSettings \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-errorcode.html#CommandLine","title":"ErrorCode.CommandLine","content":"ErrorCode.CommandLine \nCommandLine \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-errorcode.html#PostProcess","title":"ErrorCode.PostProcess","content":"ErrorCode.PostProcess \nPostProcess \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-exceptionexiter.html","title":"ExceptionExiter","content":"ExceptionExiter \n\n Handles argument parser errors by raising an exception\n \nExceptionExiter.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-exceptionexiter.html#( .ctor )","title":"ExceptionExiter.( .ctor )","content":"ExceptionExiter.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-functionconfigurationreader.html","title":"FunctionConfigurationReader","content":"FunctionConfigurationReader \n\n Function configuration reader proxy\n \nFunctionConfigurationReader.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-functionconfigurationreader.html#( .ctor )","title":"FunctionConfigurationReader.( .ctor )","content":"FunctionConfigurationReader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iargparsertemplate.html","title":"IArgParserTemplate","content":"IArgParserTemplate \n\n Interface that must be implemented by all Argu template types\n \nIArgParserTemplate.Usage \nUsage"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iargparsertemplate.html#Usage","title":"IArgParserTemplate.Usage","content":"IArgParserTemplate.Usage \nUsage \n\n returns a usage string for every union case\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iargumentparservisitor-1.html","title":"IArgumentParserVisitor<'R>","content":"IArgumentParserVisitor<'R> \n\n Rank-2 function used for accessing typed APIs of untyped parsers\n \nIArgumentParserVisitor<'R>.Visit \nVisit"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iargumentparservisitor-1.html#Visit","title":"IArgumentParserVisitor<'R>.Visit","content":"IArgumentParserVisitor<'R>.Visit \nVisit \n\n     Visit argument parser of generic type.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iconfigurationreader.html","title":"IConfigurationReader","content":"IConfigurationReader \n\n Abstract key/value configuration reader\n \nIConfigurationReader.GetValue \nGetValue \nIConfigurationReader.Name \nName"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iconfigurationreader.html#GetValue","title":"IConfigurationReader.GetValue","content":"IConfigurationReader.GetValue \nGetValue \n\n Gets value corresponding to supplied key\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iconfigurationreader.html#Name","title":"IConfigurationReader.Name","content":"IConfigurationReader.Name \nName \n\n Configuration reader identifier\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iexiter.html","title":"IExiter","content":"IExiter \n\n An interface for error handling in the argument parser\n \nIExiter.Exit \nExit \nIExiter.Name \nName"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iexiter.html#Exit","title":"IExiter.Exit","content":"IExiter.Exit \nExit \n\n handle error of given message and error code\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-iexiter.html#Name","title":"IExiter.Name","content":"IExiter.Name \nName \n\n IExiter identifier\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-nullconfigurationreader.html","title":"NullConfigurationReader","content":"NullConfigurationReader \n\n Configuration reader that never returns a value\n \nNullConfigurationReader.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-nullconfigurationreader.html#( .ctor )","title":"NullConfigurationReader.( .ctor )","content":"NullConfigurationReader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html","title":"ParseResults<'Template>","content":"ParseResults<'Template> \n\n Argument parsing result holder.\n \nParseResults<'Template>.Catch \nCatch \nParseResults<'Template>.Contains \nContains \nParseResults<'Template>.Contains \nContains \nParseResults<'Template>.GetAllResults \nGetAllResults \nParseResults<'Template>.GetResult \nGetResult \nParseResults<'Template>.GetResult \nGetResult \nParseResults<'Template>.GetResults \nGetResults \nParseResults<'Template>.GetResults \nGetResults \nParseResults<'Template>.GetSubCommand \nGetSubCommand \nParseResults<'Template>.IterResult \nIterResult \nParseResults<'Template>.IterResults \nIterResults \nParseResults<'Template>.PostProcessResult \nPostProcessResult \nParseResults<'Template>.PostProcessResults \nPostProcessResults \nParseResults<'Template>.Raise \nRaise \nParseResults<'Template>.Raise \nRaise \nParseResults<'Template>.TryGetResult \nTryGetResult \nParseResults<'Template>.TryGetResult \nTryGetResult \nParseResults<'Template>.TryGetSubCommand \nTryGetSubCommand \nParseResults<'Template>.TryPostProcessResult \nTryPostProcessResult \nParseResults<'Template>.UnrecognizedCliParseResults \nUnrecognizedCliParseResults \nParseResults<'Template>.UnrecognizedCliParams \nUnrecognizedCliParams \nParseResults<'Template>.IsUsageRequested \nIsUsageRequested \nParseResults<'Template>.ErrorHandler \nErrorHandler"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#Catch","title":"ParseResults<'Template>.Catch","content":"ParseResults<'Template>.Catch \nCatch \nHandles any raised exception through the argument parser's exiter mechanism. Display usage optionally."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#Contains","title":"ParseResults<'Template>.Contains","content":"ParseResults<'Template>.Contains \nContains \nChecks if parameter of specific kind has been specified."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#Contains","title":"ParseResults<'Template>.Contains","content":"ParseResults<'Template>.Contains \nContains \nChecks if parameter of specific kind has been specified."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#GetAllResults","title":"ParseResults<'Template>.GetAllResults","content":"ParseResults<'Template>.GetAllResults \nGetAllResults \nGets all parse results."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#GetResult","title":"ParseResults<'Template>.GetResult","content":"ParseResults<'Template>.GetResult \nGetResult \nReturns the *last* specified parameter of given type.\n          Command line parameters have precedence over AppSettings parameters."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#GetResult","title":"ParseResults<'Template>.GetResult","content":"ParseResults<'Template>.GetResult \nGetResult \nReturns the *last* specified parameter of given type.\n          Command line parameters have precedence over AppSettings parameters."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#GetResults","title":"ParseResults<'Template>.GetResults","content":"ParseResults<'Template>.GetResults \nGetResults \nQuery parse results for argument with parameters."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#GetResults","title":"ParseResults<'Template>.GetResults","content":"ParseResults<'Template>.GetResults \nGetResults \nQuery parse results for parameterless argument."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#GetSubCommand","title":"ParseResults<'Template>.GetSubCommand","content":"ParseResults<'Template>.GetSubCommand \nGetSubCommand \n\n     Attempts to recover the subcommand parameter from the results,\n     if one has been specified.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#IterResult","title":"ParseResults<'Template>.IterResult","content":"ParseResults<'Template>.IterResult \nIterResult \n\n     Iterates through the *last* parse result for a given argument kind.\n     Command line parameters have precedence over AppSettings parameters.\n     Results are passed to an iterator function that is error handled by the parser.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#IterResults","title":"ParseResults<'Template>.IterResults","content":"ParseResults<'Template>.IterResults \nIterResults \n\n     Iterates through *all* parse results for a given argument kind.\n     Command line parameters have precedence over AppSettings parameters.\n     Results are passed to an iterator function that is error handled by the parser.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#PostProcessResult","title":"ParseResults<'Template>.PostProcessResult","content":"ParseResults<'Template>.PostProcessResult \nPostProcessResult \nReturns the *last* specified parameter of given type.\n          Command line parameters have precedence over AppSettings parameters.\n          Results are passed to a post-processing function that is error handled by the parser.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#PostProcessResults","title":"ParseResults<'Template>.PostProcessResults","content":"ParseResults<'Template>.PostProcessResults \nPostProcessResults \nQuery parse results for given argument kind.\n          Command line parameters have precedence over AppSettings parameters.\n          Results are passed to a post-processing function that is error handled by the parser.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#Raise","title":"ParseResults<'Template>.Raise","content":"ParseResults<'Template>.Raise \nRaise \nRaise an error through the argument parser's exiter mechanism. Display usage optionally."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#Raise","title":"ParseResults<'Template>.Raise","content":"ParseResults<'Template>.Raise \nRaise \nRaise an error through the argument parser's exiter mechanism. Display usage optionally."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#TryGetResult","title":"ParseResults<'Template>.TryGetResult","content":"ParseResults<'Template>.TryGetResult \nTryGetResult \nReturns the *last* specified parameter of given type, if it exists.\n          Command line parameters have precedence over AppSettings parameters."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#TryGetResult","title":"ParseResults<'Template>.TryGetResult","content":"ParseResults<'Template>.TryGetResult \nTryGetResult \nReturns the *last* specified parameter of given type, if it exists.\n          Command line parameters have precedence over AppSettings parameters."},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#TryGetSubCommand","title":"ParseResults<'Template>.TryGetSubCommand","content":"ParseResults<'Template>.TryGetSubCommand \nTryGetSubCommand \n\n     Attempts to recover the subcommand parameter from the results,\n     if one has been specified.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#TryPostProcessResult","title":"ParseResults<'Template>.TryPostProcessResult","content":"ParseResults<'Template>.TryPostProcessResult \nTryPostProcessResult \nReturns the *last* specified parameter of given type.\n          Command line parameters have precedence over AppSettings parameters.\n          Results are passed to a post-processing function that is error handled by the parser.\n "},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#UnrecognizedCliParseResults","title":"ParseResults<'Template>.UnrecognizedCliParseResults","content":"ParseResults<'Template>.UnrecognizedCliParseResults \nUnrecognizedCliParseResults \n\n Gets all parse results that are not part of the current parsing context\n This is only applicable to subcommand parsing operations\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#UnrecognizedCliParams","title":"ParseResults<'Template>.UnrecognizedCliParams","content":"ParseResults<'Template>.UnrecognizedCliParams \nUnrecognizedCliParams \n\n Gets all unrecognized CLI parameters which\n accumulates if parsed with 'ignoreUnrecognized = true'\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#IsUsageRequested","title":"ParseResults<'Template>.IsUsageRequested","content":"ParseResults<'Template>.IsUsageRequested \nIsUsageRequested \n\n Returns true if '--help' parameter has been specified in the command line.\n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parseresults-1.html#ErrorHandler","title":"ParseResults<'Template>.ErrorHandler","content":"ParseResults<'Template>.ErrorHandler \nErrorHandler \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parsesource.html","title":"ParseSource","content":"ParseSource \n\n Source from which to parse arguments\n \nParseSource.None \nNone \nParseSource.AppSettings \nAppSettings \nParseSource.CommandLine \nCommandLine \nParseSource.All \nAll"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parsesource.html#None","title":"ParseSource.None","content":"ParseSource.None \nNone \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parsesource.html#AppSettings","title":"ParseSource.AppSettings","content":"ParseSource.AppSettings \nAppSettings \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parsesource.html#CommandLine","title":"ParseSource.CommandLine","content":"ParseSource.CommandLine \nCommandLine \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-parsesource.html#All","title":"ParseSource.All","content":"ParseSource.All \nAll \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-processexiter.html","title":"ProcessExiter","content":"ProcessExiter \n\n Handles argument parser errors by exiting the process\n after printing a parse error.\n \nProcessExiter.( .ctor ) \n( .ctor ) \nProcessExiter.( .ctor ) \n( .ctor ) \nProcessExiter.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-processexiter.html#( .ctor )","title":"ProcessExiter.( .ctor )","content":"ProcessExiter.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-processexiter.html#( .ctor )","title":"ProcessExiter.( .ctor )","content":"ProcessExiter.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/reference/argu-processexiter.html#( .ctor )","title":"ProcessExiter.( .ctor )","content":"ProcessExiter.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/Argu/index.html","title":"Introduction\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../src/Argu/bin/Release/netstandard2.0\"\n#r \"Argu.dll\"\n\nopen System\nopen Argu\n\ntype Args =\n    | Working_Directory of path:string\n    | Listener of host:string * port:int\n    | Log_Level of level:int\n    | Detach\nwith\n    interface IArgParserTemplate with\n        member __.Usage = \"\"\n\n(**\n\n# Introduction\n\nArgu (pronounced \"Argue\") is a declarative CLI argument parser for F# console applications.\nIt allows modelling the command-line syntax using discriminated unions,\nwhich the library converts into a working parser using reflection.\n\nArgu is a mature library that comes with many features\n\n  * Declarative: easily model your syntax definitions using F# unions.\n  * Convenient: automatic derivation of CLI syntax and documentation.\n  * Customizable: control most aspects of your parser behaviour.\n  * Subcommands: use contextual syntax with nested argument schemata.\n\nIt can be installed using <a href=\"https://nuget.org/packages/Argu\">NuGet</a>.\n\n## Basic Concepts\n\nThe library is based on the simple observation that \nconfiguration parameters can be naturally described using discriminated unions. \nFor instance:\n\n*)\n\ntype Arguments =\n    | Working_Directory of path:string\n    | Listener of host:string * port:int\n    | Log_Level of level:int\n    | Detach\n\n(**\n\nArgu takes such discriminated unions and generates \na corresponding argument parsing scheme. \nFor example, a parser generated from the above template would\ntake the following command line input\n\n    [lang=bash]\n    --working-directory /var/run --listener localhost 8080 --detach\n\nand parse it into the list\n*)\n\n[ Working_Directory \"/var/run\" ; Listener(\"localhost\", 8080) ; Detach ]\n\n(**\n\nArgu is also capable of reading the `AppSettings` section\nof an application's configuration file:\n\n    [lang=xml]\n    <appSettings>\n        <add key=\"working directory\" value=\"C:\\temp\" />\n        <add key=\"listener\" value=\"192.168.0.3, 2675\" />\n        <add key=\"log level\" value=\"3\" />\n        <add key=\"detach\" value=\"true\" />\n    </appSettings>\n\nFurthermore, you can parse environment variables, by supplying the an `EnvironmentVariableReader` to the `Parse` call:\n*)\n\nlet argv = [| \"--log-level\"; \"3\" |]\nlet reader = EnvironmentVariableConfigurationReader() :> IConfigurationReader\nlet parser =  ArgumentParser.Create<Args>(programName = \"rutta\")\n// pass the reader to the Parse call\nlet results = parser.Parse(argv, configurationReader=reader)\n\n(**\n## Who uses Argu?\n\n  * [MBrace](http://m-brace.net/)\n  \n  * [FAKE](http://fsharp.github.io/FAKE/)\n  \n  * [Paket](http://fsprojects.github.io/Paket/)\n  \n  * [Logary](https://logary.tech)\n\n## Documentation\n\n  * [Tutorial](tutorial.html) A short walkthrough of Argu features.\n\n  * [API Reference](reference/index.html) contains automatically generated documentation for all types, \n    modules and functions in the library.\n\n## Contributing and copyright\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests.\n\nThe library is available under the MIT License. \nFor more information see the [License file][license] in the GitHub repository. \n\n  [gh]: https://github.com/fsprojects/Argu\n  [issues]: https://github.com/fsprojects/Argu/issues\n  [license]: https://github.com/fsprojects/Argu/blob/master/License.md\n\n*)"},{"uri":"https://fsprojects.github.io/Argu/perf.html","title":"Performance Tips\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#I \"../src/Argu/bin/Release/netstandard2.0\"\n#r \"Argu.dll\"\n\nopen Argu\n\ntype Arguments =\n    | Argument\nwith\n    interface IArgParserTemplate with\n        member __.Usage =\n            \"Usage\"\n\ntype FactAttribute () = inherit System.Attribute()\n\n(**\n\n# Performance Tips\n\n## Introduction\n\nArgu simplicity is achieved via Reflection and as such it's performance heavily depend on the size and depth of the\ndiscriminated union used.\n\nFor applications that wants to get a little more performance out of Argu it's also possible to get a little more\nperformance.\n\n## Bypassing structure checks\n\nBy default Argu checks that the discriminated union is well formed and only contains entries that are valid.\nThis incur both the cost of the checks themselves but also the cost of materializing the whole argument graph that could\nbe loaded only if the corresponding arguments are used.\n\nThis check can easilly be bypassed either only in release builds :\n\n*)\n\nlet checkStructure =\n#if DEBUG\n    true\n#else\n    false\n#endif\n\nlet parser = ArgumentParser.Create<Arguments>(checkStructure = checkStructure)\n\n(**\n\nOr always, forcing the check to happen during unit tests:\n\n*)\n\n// In the application\nmodule AppArgs =\n    let parser = ArgumentParser.Create<Arguments>(checkStructure = false)\n\n// In tests\n[<Fact>]\nlet ``Argument structure is correct`` () =\n    ArgumentParser<Arguments>.CheckStructure()\n(**\n*)"},{"uri":"https://fsprojects.github.io/Argu/tutorial.html","title":"Tutorial\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#I \"../src/Argu/bin/Release/netstandard2.0\"\n#r \"Argu.dll\"\n\nopen System\n\n(**\n\n# Tutorial\n\n## Introduction\n\nThe library is based on the simple observation that\nconfiguration parameters can be naturally described using discriminated unions.\nFor instance:\n\n*)\n\ntype Arguments =\n    | Working_Directory of path:string\n    | Listener of host:string * port:int\n    | Log_Level of level:int\n    | Detach\n\n(**\n\nArgu takes such discriminated unions and generates\na corresponding argument parsing scheme.\nFor example, a parser generated from the above template would\ntake the following command line input\n\n    [lang=bash]\n    --working-directory /var/run --listener localhost 8080 --detach\n\nand parse it into the list\n*)\n\n[ Working_Directory \"/var/run\" ; Listener(\"localhost\", 8080) ; Detach ]\n\n(**\n\nArgu is also capable of reading the `AppSettings` section\nof an application's configuration file:\n\n    [lang=xml]\n    <appSettings>\n        <add key=\"working directory\" value=\"C:\\temp\" />\n        <add key=\"listener\" value=\"192.168.0.3, 2675\" />\n        <add key=\"log level\" value=\"3\" />\n        <add key=\"detach\" value=\"true\" />\n    </appSettings>\n\nBoth XML configuration and command line arguments can be parsed\nat the same time. By default, command line parameters override\ntheir corresponding XML configuration.\n\n## Basic Usage\n\nA minimal parser based on the above example can be created as follows:\n*)\n\nopen Argu\n\ntype CliArguments =\n    | Working_Directory of path:string\n    | Listener of host:string * port:int\n    | Data of base64:byte[]\n    | Port of tcp_port:int\n    | Log_Level of level:int\n    | Detach\n\n    interface IArgParserTemplate with\n        member s.Usage =\n            match s with\n            | Working_Directory _ -> \"specify a working directory.\"\n            | Listener _ -> \"specify a listener (hostname : port).\"\n            | Data _ -> \"binary data in base64 encoding.\"\n            | Port _ -> \"specify a primary port.\"\n            | Log_Level _ -> \"set the log level.\"\n            | Detach _ -> \"detach daemon from console.\"\n\n(** We extract the argument parser from the template using the following command: *)\n\nlet parser = ArgumentParser.Create<CliArguments>(programName = \"gadget.exe\")\n\n(** We can get the automatically generated usage string by typing *)\n\nlet usage = parser.PrintUsage()\n\n(** giving\n\n    [lang=bash]\n    USAGE: gadget.exe [--help] [--working-directory <path>] [--listener <host> <port>] [--data <base64>]\n                      [--port <tcp port>] [--log-level <level>] [--detach]\n\n    OPTIONS:\n\n        --working-directory <path>\n                              specify a working directory.\n        --listener <host> <port>\n                              specify a listener (hostname : port).\n        --data <base64>       binary data in base64 encoding.\n        --port <tcp port>     specify a primary port.\n        --log-level <level>   set the log level.\n        --detach              detach daemon from console.\n        --help                display this list of options.\n\nTo parse a command line input:\n\n*)\n\nlet results = parser.Parse [| \"--detach\" ; \"--listener\" ; \"localhost\" ; \"8080\" |]\n\n(** which gives *)\n\nlet all = results.GetAllResults() // [ Detach ; Listener (\"localhost\", 8080) ]\n\n(**\n\n## Querying Parameters\n\nWhile getting a single list of all parsed results might be useful for some cases,\nit is more likely that you need to query the results for specific parameters:\n\n*)\n\nlet detach = results.Contains Detach\nlet listener = results.GetResults Listener\n\n(** The following methods return the last observed result for given argument case *)\n\nlet dataOpt = results.TryGetResult Data\nlet logLevel = results.GetResult (Log_Level, defaultValue = 0)\n\n(**\n\nQuerying using quotations enables a simple and type safe way\nto deconstruct parse results into their constituent values.\n\n## Customization\n\nThe parsing behaviour of the configuration parameters\ncan be customized by fixing attributes to the union cases:\n\n*)\n\ntype Argument =\n    | [<Mandatory>] Cache_Path of path:string\n    | [<NoCommandLine>] Connection_String of conn:string\n    | [<Unique>] Listener of host:string * port:int\n    | [<EqualsAssignment>] Assignment of value:string\n    | [<EqualsAssignmentOrSpaced>] AssignmentOrSpace of value:string\n    | [<AltCommandLine(\"-p\")>] Primary_Port of tcp_port:int\n\n(**\n\nIn this case,\n\n  * [`Mandatory`](reference/argu-arguattributes-mandatoryattribute.html): parser will fail if no configuration for this parameter is given.\n\n  * [`NoCommandLine`](reference/argu-arguattributes-nocommandlineattribute.html): restricts this parameter to the AppSettings section.\n\n  * [`AltCommandLine`](reference/argu-arguattributes-altcommandlineattribute.html): specifies an alternative command line switch.\n\n  * [`EqualsAssignment`](reference/argu-arguattributes-equalsassignmentattribute.html) : enforces `--assignment=value` and `--assignment key=value` CLI syntax.\n  \n  * [`EqualsAssignmentOrSpaced`](reference/argu-arguattributes-equalsassignmentorspacedattribute.html) : enforces `--assignment=value` and `--assignment value` CLI syntax.\n\n  * [`Unique`](reference/argu-arguattributes-uniqueattribute.html) : parser will fail if CLI provides this argument more than once.\n\nMany more attributes are also available, such as\n\n  * [`First`](reference/argu-arguattributes-firstattribute.html): Argument can only be placed at the beginning of the command line.\n\n  * [`Hidden`](reference/argu-arguattributes-hiddenattribute.html): do not display in the help usage string.\n\n  * [`CustomAppSettings`](reference/argu-arguattributes-customappsettingsattribute.html): sets a custom key name for AppSettings.\n\n  * [`CustomAssignment`](reference/argu-arguattributes-customassignmentattribute.html): works like EqualsAssignment but with a custom separator string.\n\nPlease see the [API Reference](https://fsprojects.github.io/Argu/reference/argu-arguattributes.html)\nfor a complete list of all attributes provided by Argu.\n\n## Supported Primitives\n\nArguments can specify the following primitives as parameters:\n\n  * `bool`, `byte` and `sbyte`.\n  * `int`, `int16` and `int64`.\n  * `uint`, `uint16` and `uint64`.\n  * `char`, `string` and `guid`.\n  * `float`, `double` and `decimal`.\n  * `System.Numerics.BigInt`.\n  * `byte[]`, which accepts base64 representations.\n\n## Optional and List parameters\n\nAdditionally, it is possible to specify argument parameters that are either optional or lists:\n\n*)\n\ntype VariadicParameters =\n    | [<EqualsAssignment>] Enable_Logging of path:string option\n    | Tcp_Ports of port:int list\n\n(**\n\nwhich results in the following syntax:\n\n    [lang=console]\n    USAGE: gadget.exe [--help] [--enable-logging[=<path>]] [--tcp-ports [<port>...]]\n\n    OPTIONS:\n\n        --enable-logging[=<path>]  enable logging for the process; optionally path to the logfile can be specified.\n        --tcp-ports [<port>...]    specify a list of TCP ports for the process.\n        --help                     display this list of options.\n\nNote that arguments that use optional or list must have precisely one parameter.\n\n## Enumeration parameters\n\nArgu can also accept enumerations as parameters:\n\n*)\n\ntype MyEnum =\n    | First  = 1\n    | Second = 2\n    | Third  = 3\n\ntype EnumArguments =\n    | Get_Enum of MyEnum\n\n(**\n\nwhich results in the syntax\n\n    [lang=console]\n    USAGE: gadget.exe [--help] [--get-enum <first|second|third>]\n\n    OPTIONS:\n\n        --get-enum <first|second|third>\n                              specify either of 'first', 'second' or 'third'.\n        --help                display this list of options.\n\nNote that it is possible to specify F# unions instead of enumerations in this context,\nprovided that these do not specify any parameters in any of their cases.\n\n## Main commands\n\nArguments carrying the [MainCommand](reference/argu-arguattributes-maincommandattribute.html)\nattribute can be used to specify the main set of arguments for the CLI.\nThese arguments can be passed without the need to specify a switch identifier.\n\n*)\n\ntype WGetArguments =\n    | Quiet\n    | No_Check_Certificate\n    | [<MainCommand; ExactlyOnce; Last>] Urls of url:string list\n\n(**\n\nwhich generates the syntax\n\n    [lang=console]\n    USAGE: wget [--help] [--quiet] [--no-check-certificate] <url>...\n\n    URLS:\n\n        <url>...              List of urls to download from.\n\n    OPTIONS:\n\n        --quiet               Turn off Wget's output.\n        --no-check-certificate\n                              Don't check the server certificate.\n        --help                display this list of options.\n\n## SubCommands\n\nAs of Argu 3.0, it is possible to provide nested, contextual parsing.\nFor example, consider this mock git CLI syntax:\n\n*)\n\n[<CliPrefix(CliPrefix.Dash)>]\ntype CleanArgs =\n    | D\n    | F\n    | X\n\n    interface IArgParserTemplate with\n        member this.Usage =\n            match this with\n            | D -> \"Remove untracked directories in addition to untracked files\"\n            | F -> \"Git clean will refuse to delete files or directories unless given -f.\"\n            | X -> \"Remove only files ignored by Git.\"\n\n(** *)\n\nand CommitArgs =\n    | Amend\n    | [<AltCommandLine(\"-p\")>] Patch\n    | [<AltCommandLine(\"-m\")>] Message of msg:string\n\n    interface IArgParserTemplate with\n        member this.Usage =\n            match this with\n            | Amend -> \"Replace the tip of the current branch by creating a new commit.\"\n            | Patch -> \"Use the interactive patch selection interface to chose which changes to commit.\"\n            | Message _ -> \"Use the given <msg> as the commit message. \"\n\n(** *)\n\nand GitArgs =\n    | Version\n    | [<AltCommandLine(\"-v\")>] Verbose\n    | [<CliPrefix(CliPrefix.None)>] Clean of ParseResults<CleanArgs>\n    | [<CliPrefix(CliPrefix.None)>] Commit of ParseResults<CommitArgs>\n\n    interface IArgParserTemplate with\n        member this.Usage =\n            match this with\n            | Version -> \"Prints the Git suite version that the git program came from.\"\n            | Verbose -> \"Print a lot of output to stdout.\"\n            | Clean _ -> \"Remove untracked files from the working tree.\"\n            | Commit _ -> \"Record changes to the repository.\"\n\n(**\nand the following console app entrypoint\n*)\n\n//[<EntryPoint>]\nlet main argv =\n    try\n        parser.ParseCommandLine(inputs = argv, raiseOnUsage = true) |> ignore\n    with e ->\n        printfn \"%s\" e.Message\n    0\n\n(**\n\nwhich generates the following syntax on corresponding command and subcommand help requests:\n\n    [lang=console]\n    USAGE: git [--help] [--version] [--verbose] [<subcommand> [<options>]]\n\n    SUBCOMMANDS:\n\n        clean <options>       Remove untracked files from the working tree.\n        commit <options>      Record changes to the repository.\n\n\t    Use 'git <subcommand> --help' for additional information.\n\n    OPTIONS:\n\n        --version             Prints the Git suite version that the git program came from.\n        --verbose, -v         Print a lot of output to stdout.\n        --help                display this list of options.\n\nand for the subcommand:\n\n    [lang=console]\n    USAGE: git commit [--help] [--amend] [--patch] [--message <msg>]\n\n    OPTIONS:\n\n        --amend               Replace the tip of the current branch by creating a new commit.\n        --patch, -p           Use the interactive patch selection interface to chose which changes to commit.\n        --message, -m <msg>   Use the given <msg> as the commit message.\n        --help                display this list of options.\n\nThis allows specifying parameters that are particular to a subcommand context.\nFor instance, `git clean -fdx` parses correctly to `[Clean [F; D; X]]`, however\n`git -f` or `git commit -f` will both result in a parse error:\n\n    [lang=console]\n    ERROR: unrecognized argument: '-f'.\n\n### Inheriting parent arguments\n\nSwitches specified in the parent argument union do not automatically\nmake it to the syntax of the child subcommand. For example the command\n\n    [lang=console]\n    git clean --version\n\nwill result in parse error since `Version` is not a part of the subcommand syntax,\nbut one of its parent syntax. It is possible to parent options visible inside subcommands\nby attaching the [`InheritAttribute`](https://fsprojects.github.io/Argu/reference/argu-arguattributes-inheritattribute.html)\nto switches.\n\n    [lang=fsharp]\n    type GitArgs =\n        | [<Inherit>] Version\n\nwhich would make the aforementioned syntax valid.\n\n## Post Processing\n\nIt should be noted here that arbitrary unions are not supported by the parser.\nUnion cases can only contain fields of primitive types. This means that user-defined\nparsers are not supported. For configuration inputs that are non-trivial,\na post-process facility is provided.\n*)\n\nlet parsePort p =\n    if p < 0 || p > int UInt16.MaxValue then\n        failwith \"invalid port number.\"\n    else p\n\nlet ports = results.PostProcessResults (<@ Port @>, parsePort)\n\n(**\n\nThis construct is useful since error handling is delegated to the mechanisms of Argu.\n\n## Unparsing Support\n\nArgu is convenient when it comes to automated process spawning:\n*)\n\nopen System.Diagnostics\n\nlet arguments = parser.PrintCommandLineArgumentsFlat [ Port 42 ; Working_Directory \"temp\" ]\n\nProcess.Start(\"foo.exe\", arguments)\n\n(**\nIt can also be used to auto-generate a suitable `AppSettings` configuration file:\n*)\n\nlet xml = parser.PrintAppSettingsArguments [ Port 42 ; Working_Directory \"/tmp\" ]\n\n(**\nwhich would yield the following:\n\n    [lang=xml]\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\n    <configuration>\n      <appSettings>\n        <!-- sets the port number. : port -->\n        <add key=\"port\" value=\"42\" />\n        <!-- sets the working directory. : path -->\n        <add key=\"working directory\" value=\"/tmp\" />\n      </appSettings>\n    </configuration>\n\n## More Examples\n\nCheck out the [samples](https://github.com/fsprojects/Argu/tree/master/samples)\nfolder for CLI implementations that use Argu.\n\n*)"}]